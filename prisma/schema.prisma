// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("Direct_URL")
  directUrl      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  name                  String
  username              String         @unique
  password              String
  phone                 String?
  role                  Role
  managerId             Int?
  manager               User?          @relation("ManagerEmployees", fields: [managerId], references: [id])
  employees             User[]         @relation("ManagerEmployees")
  tasksAssigned         Task[]         @relation("AssignedTasks")
  tasksReceived         Task[]         @relation("ReceivedTasks")
  workLogs              WorkLog[] // üëà add this line
  announcementsReceived Announcement[] @relation("AnnouncementToUser")
  announcementsCreated  Announcement[] @relation("AnnouncementCreatedBy")
  createdAt             DateTime       @default(now())
  Reminder              Reminder[]
}

model Announcement {
  id      Int              @id @default(autoincrement())
  title   String
  message String
  type    AnnouncementType @default(GENERAL)

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?

  assignedTo   User? @relation("AnnouncementToUser", fields: [assignedToId], references: [id])
  assignedToId Int?

  createdBy   User? @relation("AnnouncementCreatedBy", fields: [createdById], references: [id])
  createdById Int?

  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
}

model Project {
  id              Int            @id @default(autoincrement())
  name            String
  description     String?
  status          String         @default("ACTIVE")
  categories      Category[]
  createdAt       DateTime       @default(now())
  Announcement    Announcement[]
  paymentProgress Float?         @default(0)
}

model Category {
  id        Int           @id @default(autoincrement())
  name      String
  project   Project       @relation(fields: [projectId], references: [id])
  projectId Int
  subcats   Subcategory[]
}

model Subcategory {
  id         Int      @id @default(autoincrement())
  name       String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  tasks      Task[]
}

model Task {
  id            Int         @id @default(autoincrement())
  title         String
  description   String?
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int
  assignedBy    User?       @relation("AssignedTasks", fields: [assignedById], references: [id])
  assignedById  Int?
  assignedTo    User        @relation("ReceivedTasks", fields: [assignedToId], references: [id])
  assignedToId  Int
  workLogs      WorkLog[] // üëà add this line
  steps         Step[] // ‚Üê add this
  deadline      DateTime?
}

model WorkLog {
  id         Int      @id @default(autoincrement())
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     Int
  employee   User     @relation(fields: [employeeId], references: [id])
  employeeId Int
  step       Step?    @relation(fields: [stepId], references: [id])
  stepId     Int?
  workDate   DateTime @default(now())
  notes      String?
  progress   Float    @default(0)
}

model Step {
  id        Int       @id @default(autoincrement())
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    Int
  name      String
  completed Boolean   @default(false)
  progress  Float     @default(0)
  WorkLog   WorkLog[]
}

model Reminder {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  isDone    Boolean  @default(false)
  remindAt  DateTime // when the reminder should trigger
  createdAt DateTime @default(now())
}

enum Role {
  executive
  manager
  employee
  accountant
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum AnnouncementType {
  PROJECT_ASSIGNMENT
  EXECUTIVE_MESSAGE
  GENERAL
}
